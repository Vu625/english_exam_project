import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

// Component cho Chatbot (s·∫Ω ph√°t tri·ªÉn sau)
function Chatbot({ question, grammarTopic, onChatOpen }) {
    const [isVisible, setIsVisible] = useState(false);
    const [message, setMessage] = useState('');
    const [timerId, setTimerId] = useState(null);

    useEffect(() => {
        // Hi·ªÉn th·ªã g·ª£i √Ω chatbot sau 5 gi√¢y n·∫øu kh√¥ng c√≥ t∆∞∆°ng t√°c
        const id = setTimeout(() => {
            setMessage("B·∫°n c·∫ßn t√¥i gi·∫£i th√≠ch c√¢u n√†y kh√¥ng?");
            setIsVisible(true);
        }, 5000);
        setTimerId(id);

        return () => clearTimeout(id); // D·ªçn d·∫πp timer khi component unmount
    }, [question]); // Reset timer khi c√¢u h·ªèi thay ƒë·ªïi

    const handleBubbleClick = () => {
        setIsVisible(false);
        clearTimeout(timerId); // X√≥a timer khi m·ªü chat
        onChatOpen({ question, grammarTopic }); // G·ªçi h√†m m·ªü c·ª≠a s·ªï chat trong ExercisePage
    };

    return (
        <div style={{ position: 'fixed', bottom: '20px', right: '20px', zIndex: 1000 }}>
            {isVisible && (
                <div 
                    style={{
                        backgroundColor: '#e0f7fa', 
                        border: '1px solid #00bcd4', 
                        borderRadius: '10px', 
                        padding: '10px 15px', 
                        maxWidth: '250px', 
                        cursor: 'pointer',
                        boxShadow: '0 2px 5px rgba(0,0,0,0.2)'
                    }}
                    onClick={handleBubbleClick}
                >
                    <p style={{ margin: 0, fontSize: '0.9em', color: '#00796b' }}>{message}</p>
                </div>
            )}
            <button 
                style={{
                    backgroundColor: '#00bcd4', 
                    color: 'white', 
                    border: 'none', 
                    borderRadius: '50%', 
                    width: '50px', 
                    height: '50px', 
                    fontSize: '1.5em', 
                    cursor: 'pointer', 
                    marginTop: '10px',
                    boxShadow: '0 2px 5px rgba(0,0,0,0.3)'
                }}
                onClick={handleBubbleClick}
            >
                üí¨
            </button>
        </div>
    );
}


function ChatWindow({ isOpen, onClose, currentQuestion, grammarTopic }) {
    const [chatMessages, setChatMessages] = useState([]);
    const [isLoading, setIsLoading] = useState(false);

    // C·∫ßn reset chatMessages khi m·ªü l·∫°i c·ª≠a s·ªï chat
    useEffect(() => {
        if (isOpen) {
            setChatMessages([]); // X√≥a tin nh·∫Øn c≈© khi c·ª≠a s·ªï chat m·ªü
        }
    }, [isOpen]);

    const handleChatButtonClick = async (buttonType) => {
        let userMessage = '';
        let promptToSend = '';

        switch (buttonType) {
            case 'translate':
                userMessage = 'D·ªãch c√¢u h·ªèi n√†y';
                promptToSend = `D·ªãch c√¢u ti·∫øng Anh n√†y sang ti·∫øng Vi·ªát: "${currentQuestion.Question}"`;
                break;
            case 'hint':
                userMessage = 'G·ª£i √Ω cho t√¥i';
                promptToSend = `H√£y ƒë∆∞a ra m·ªôt g·ª£i √Ω nh·ªè ƒë·ªÉ gi·∫£i quy·∫øt c√¢u h·ªèi ng·ªØ ph√°p n√†y m√† kh√¥ng ti·∫øt l·ªô ƒë√°p √°n. C√¢u h·ªèi: "${currentQuestion.Question}". C√°c l·ª±a ch·ªçn: A: "${currentQuestion.A}", B: "${currentQuestion.B}", C: "${currentQuestion.C}", D: "${currentQuestion.D}"`;
                break;
            case 'explain_grammar':
                userMessage = 'N√≥i l·∫°i cho t√¥i ph·∫ßn ng·ªØ ph√°p n√†y ƒëi, t√¥i qu√™n m·∫•t r·ªìi';
                // ƒê·∫£m b·∫£o grammarTopic c√≥ gi√° tr·ªã ƒë·ªÉ tr√°nh prompt r·ªóng
                const topicForGrammar = grammarTopic || "ng·ªØ ph√°p ti·∫øng Anh"; // Fallback n·∫øu kh√¥ng c√≥ topic
                promptToSend = `H√£y gi·∫£i th√≠ch l·∫°i chi ti·∫øt v·ªÅ ch·ªß ƒë·ªÅ ng·ªØ ph√°p: "${topicForGrammar}".`;
                break;
            // Th√™m tr∆∞·ªùng h·ª£p cho l·ªùi gi·∫£i th√≠ch c·∫∑n k·∫Ω sau khi ki·ªÉm tra n·∫øu c·∫ßn
            case 'explain_after_check':
                userMessage = 'Gi·∫£i th√≠ch chi ti·∫øt ƒë√°p √°n';
                promptToSend = `T√¥i v·ª´a tr·∫£ l·ªùi c√¢u h·ªèi "${currentQuestion.Question}". ƒê√°p √°n ƒë√∫ng l√† "${currentQuestion.Answer}". H√£y gi·∫£i th√≠ch c·∫∑n k·∫Ω l√Ω do t·∫°i sao ƒë√°p √°n ƒë√≥ ƒë√∫ng v√† ph√¢n t√≠ch c√°c l·ª±a ch·ªçn sai n·∫øu c√≥ th·ªÉ. T·∫≠p trung v√†o c√°c quy t·∫Øc ng·ªØ ph√°p li√™n quan ƒë·∫øn "${grammarTopic}".`;
                break;
            default:
                return;
        }

        setChatMessages(prev => [...prev, { sender: 'user', text: userMessage }]);
        setIsLoading(true);

        try {
            // G·ª≠i prompt tr·ª±c ti·∫øp ƒë·∫øn backend
            const response = await axios.post('http://localhost:8000/api/advice/', {
                chatbot_prompt: promptToSend // <--- D·ªØ li·ªáu m·ªõi
            });
            setChatMessages(prev => [...prev, { sender: 'ai', text: response.data.advice }]);
        } catch (error) {
            console.error("L·ªói khi h·ªèi AI:", error);
            setChatMessages(prev => [...prev, { sender: 'ai', text: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i." }]);
        } finally {
            setIsLoading(false);
        }
    };

    if (!isOpen) return null;

    return (
        <div style={{
            position: 'fixed', bottom: '90px', right: '20px',
            width: '350px', height: '450px', backgroundColor: 'white',
            border: '1px solid #ccc', borderRadius: '10px', boxShadow: '0 4px 10px rgba(0,0,0,0.2)',
            display: 'flex', flexDirection: 'column', zIndex: 1001
        }}>
            <div style={{ padding: '10px', backgroundColor: '#00bcd4', color: 'white', borderTopLeftRadius: '9px', borderTopRightRadius: '9px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <strong>Chatbot</strong>
                <button onClick={onClose} style={{ background: 'none', border: 'none', color: 'white', fontSize: '1.2em', cursor: 'pointer' }}>X</button>
            </div>
            <div style={{ flexGrow: 1, padding: '10px', overflowY: 'auto', borderBottom: '1px solid #eee' }}>
                {chatMessages.map((msg, index) => (
                    <div key={index} style={{ textAlign: msg.sender === 'user' ? 'right' : 'left', margin: '5px 0' }}>
                        <span style={{ 
                            display: 'inline-block', 
                            padding: '8px 12px', 
                            borderRadius: '15px', 
                            backgroundColor: msg.sender === 'user' ? '#e0f7fa' : '#c8e6c9', 
                            color: 'black' 
                        }}>
                            {msg.text}
                        </span>
                    </div>
                ))}
                {isLoading && <p style={{ textAlign: 'center', fontStyle: 'italic', color: '#555' }}>ƒêang t·∫£i...</p>}
            </div>
            <div style={{ padding: '10px', display: 'flex', flexDirection: 'column', gap: '5px' }}>
                <button onClick={() => handleChatButtonClick('translate')} style={{ padding: '8px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>D·ªãch c√¢u h·ªèi n√†y</button>
                <button onClick={() => handleChatButtonClick('hint')} style={{ padding: '8px', backgroundColor: '#FFC107', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>G·ª£i √Ω cho t√¥i</button>
                <button onClick={() => handleChatButtonClick('explain_grammar')} style={{ padding: '8px', backgroundColor: '#2196F3', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>N√≥i l·∫°i ph·∫ßn ng·ªØ ph√°p n√†y ƒëi</button>
                {/* Th√™m n√∫t gi·∫£i th√≠ch chi ti·∫øt sau khi ki·ªÉm tra n·∫øu c·∫ßn */}
                {/* {showResult && <button onClick={() => handleChatButtonClick('explain_after_check')}>Gi·∫£i th√≠ch chi ti·∫øt</button>} */}
            </div>
        </div>
    );
}
// ... (ph·∫ßn c√≤n l·∫°i c·ªßa ExercisePage.js kh√¥ng thay ƒë·ªïi) ...

function ExercisePage({ type }) { // <--- TH√äM type v√†o ƒë√¢y
    const { topic } = useParams(); // L·∫•y topic t·ª´ URL (e.g., 'hien-tai', 'doan-van')
    const [questions, setQuestions] = useState([]);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [selectedAnswer, setSelectedAnswer] = useState(null);
    const [showResult, setShowResult] = useState(false);
    const [isCorrect, setIsCorrect] = useState(false);
    const [explanation, setExplanation] = useState('');
    const [chatWindowOpen, setChatWindowOpen] = useState(false);
    const [currentChatQuestion, setCurrentChatQuestion] = useState(null);
    const [currentGrammarTopic, setCurrentGrammarTopic] = useState('');


    useEffect(() => {
        const fetchQuestions = async () => {
            try {
                let apiUrl = '';
                if (type === 'grammar') {
                    apiUrl = `http://localhost:8000/api/exercises/${topic}/`;
                } else if (type === 'reading') {
                    apiUrl = `http://localhost:8000/api/reading-exercises/${topic}/`; // D√ôNG ENDPOINT M·ªöI
                } else {
                    console.error("Lo·∫°i b√†i t·∫≠p kh√¥ng h·ª£p l·ªá:", type);
                    setQuestions([]);
                    return;
                }
                
                const response = await axios.get(apiUrl);
                setQuestions(response.data);
                setCurrentQuestionIndex(0); // B·∫Øt ƒë·∫ßu l·∫°i t·ª´ c√¢u ƒë·∫ßu ti√™n
                setSelectedAnswer(null);
                setShowResult(false);
                setIsCorrect(false);
                setExplanation('');
            } catch (error) {
                console.error("L·ªói khi t·∫£i c√¢u h·ªèi:", error);
                setQuestions([]); // ƒê·∫∑t l·∫°i c√¢u h·ªèi n·∫øu c√≥ l·ªói
            }
        };
        fetchQuestions();
    }, [topic, type]); // Ch·∫°y l·∫°i khi topic HO·∫∂C type thay ƒë·ªïi

    const currentQuestion = questions[currentQuestionIndex];

    const handleAnswerChange = (e) => {
        setSelectedAnswer(e.target.value);
        setShowResult(false);
    };

    const handleSubmit = () => {
        if (selectedAnswer === null) {
            alert('Vui l√≤ng ch·ªçn m·ªôt ƒë√°p √°n.');
            return;
        }
        if (currentQuestion.Answer === selectedAnswer) {
            setIsCorrect(true);
        } else {
            setIsCorrect(false);
        }
        setExplanation(currentQuestion.Explain);
        setShowResult(true);
    };

    const handleNextQuestion = () => {
        setSelectedAnswer(null);
        setShowResult(false);
        setIsCorrect(false);
        setExplanation('');
        if (currentQuestionIndex < questions.length - 1) {
            setCurrentQuestionIndex(prevIndex => prevIndex + 1);
        } else {
            alert('B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c c√¢u h·ªèi trong ch·ªß ƒë·ªÅ n√†y!');
            // C√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng v·ªÅ trang l·ª±a ch·ªçn ch·ªß ƒë·ªÅ
        }
    };

    const handleOpenChat = ({ question, grammarTopic }) => {
        setCurrentChatQuestion(question);
        setCurrentGrammarTopic(grammarTopic); // S·∫Ω l√† "Reading - Main Idea" ho·∫∑c "Reading - Detail" cho b√†i ƒë·ªçc
        setChatWindowOpen(true);
    };

    const handleCloseChat = () => {
        setChatWindowOpen(false);
        // setChatMessages([]); // ƒê√£ di chuy·ªÉn logic n√†y v√†o useEffect trong ChatWindow
    };

    if (questions.length === 0) {
        return <div style={{ textAlign: 'center', marginTop: '50px' }}>ƒêang t·∫£i c√¢u h·ªèi ho·∫∑c kh√¥ng c√≥ c√¢u h·ªèi n√†o...</div>;
    }

    return (
        <div style={{ maxWidth: '800px', margin: '50px auto', padding: '20px', border: '1px solid #eee', borderRadius: '8px', boxShadow: '0 2px 10px rgba(0,0,0,0.1)' }}>
            {/* C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ ƒë·ªÉ ph·∫£n √°nh lo·∫°i b√†i t·∫≠p */}
            <h2>B√†i t·∫≠p {type === 'grammar' ? 'Ng·ªØ ph√°p' : 'ƒê·ªçc hi·ªÉu'}: {topic.replace('-', ' ').toUpperCase()}</h2>
            
            <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: '#f9f9f9', borderRadius: '5px' }}>
                {/* HI·ªÇN TH·ªä C√ÇU H·ªéI V√Ä ƒêO·∫†N VƒÇN M·ªòT C√ÅCH PH√ô H·ª¢P */}
                {type === 'reading' ? (
                    // N·∫øu l√† b√†i ƒë·ªçc, chia c√¢u h·ªèi th√†nh ƒëo·∫°n vƒÉn v√† c√¢u h·ªèi ph·ª•
                    // Gi·∫£ ƒë·ªãnh Question c√≥ d·∫°ng "Read the passage:\n\n[ƒêo·∫°n vƒÉn]\n\n[C√¢u h·ªèi ph·ª•]"
                    // B·∫°n c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh c√°ch parse n·∫øu ƒë·ªãnh d·∫°ng kh√°c
                    (() => {
                        const parts = currentQuestion.Question.split('\n\n');
                        if (parts.length >= 2 && parts[0].startsWith('Read the passage')) {
                            const passage = parts[1];
                            const actualQuestion = parts.slice(2).join('\n\n');
                            return (
                                <>
                                    <p style={{ fontStyle: 'italic', marginBottom: '10px' }}>{parts[0]}</p>
                                    <div style={{ padding: '10px', border: '1px dashed #ccc', borderRadius: '5px', backgroundColor: '#fff', marginBottom: '15px', whiteSpace: 'pre-wrap' }}>
                                        {passage}
                                    </div>
                                    <p style={{ fontWeight: 'bold', fontSize: '1.1em' }}>{currentQuestion.ID}. {actualQuestion}</p>
                                </>
                            );
                        }
                        // Fallback n·∫øu ƒë·ªãnh d·∫°ng kh√¥ng kh·ªõp, hi·ªÉn th·ªã to√†n b·ªô Question
                        return <p style={{ fontWeight: 'bold', fontSize: '1.1em' }}>{currentQuestion.ID}. {currentQuestion.Question}</p>;
                    })()
                ) : (
                    // M·∫∑c ƒë·ªãnh cho b√†i t·∫≠p ng·ªØ ph√°p
                    <p style={{ fontWeight: 'bold', fontSize: '1.1em' }}>{currentQuestion.ID}. {currentQuestion.Question}</p>
                )}
                
                <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
                    {['A', 'B', 'C', 'D'].map(option => (
                        <label key={option} style={{ cursor: 'pointer', padding: '8px', border: '1px solid #ddd', borderRadius: '4px', backgroundColor: selectedAnswer === option ? '#e0f7fa' : 'transparent' }}>
                            <input
                                type="radio"
                                name="answer"
                                value={option}
                                checked={selectedAnswer === option}
                                onChange={handleAnswerChange}
                                disabled={showResult}
                                style={{ marginRight: '10px' }}
                            />
                            {option}. {currentQuestion[option]}
                        </label>
                    ))}
                </div>
            </div>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '15px', marginTop: '20px' }}>
                {!showResult ? (
                    <button 
                        onClick={handleSubmit} 
                        style={{ padding: '10px 20px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer', fontSize: '1em' }}
                    >
                        Ki·ªÉm tra
                    </button>
                ) : (
                    <button 
                        onClick={handleNextQuestion} 
                        style={{ padding: '10px 20px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer', fontSize: '1em' }}
                    >
                        Ti·∫øp theo
                    </button>
                )}
            </div>

            {showResult && (
                <div style={{ marginTop: '20px', padding: '15px', border: `1px solid ${isCorrect ? '#28a745' : '#dc3545'}`, borderRadius: '5px', backgroundColor: isCorrect ? '#e6ffe6' : '#ffe6e6' }}>
                    <p style={{ fontWeight: 'bold', color: isCorrect ? '#28a745' : '#dc3545' }}>
                        {isCorrect ? 'Ch√≠nh x√°c!' : 'Sai r·ªìi!'}
                    </p>
                    <p>Gi·∫£i th√≠ch: {explanation}</p>
                    <p>ƒê√°p √°n ƒë√∫ng: {currentQuestion.Answer}</p>
                </div>
            )}

            {/* Chatbot Bubble and Window */}
            <Chatbot 
                question={currentQuestion} 
                grammarTopic={currentQuestion.Grammar} 
                onChatOpen={handleOpenChat} 
            />
            <ChatWindow 
                isOpen={chatWindowOpen} 
                onClose={handleCloseChat} 
                currentQuestion={currentChatQuestion} 
                grammarTopic={currentGrammarTopic} 
            />
        </div>
    );
}

export default ExercisePage;

